{"version":3,"sources":["../../lib/precompile.js"],"names":["uglifyjs","require","prefixer","tokenizer","parser","compiler","blocks","codegen","compile","source","opts","prefixed","tokens","parsed","fnAst","ast","minified","minify","wrap","compiled","replace","wrapped","result","error","code","precompile","options","callback","promise","Promise","try","Object","assign","defaults","Error","then","process","nextTick","err","unsafe","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,WAAWC,QAAQ,WAAR,CAAjB;;AAEA,MAAMC,WAAWD,QAAQ,qBAAR,CAAjB;AACA,MAAME,YAAYF,QAAQ,sBAAR,CAAlB;AACA,MAAMG,SAASH,QAAQ,mBAAR,CAAf;AACA,MAAMI,WAAWJ,QAAQ,qBAAR,CAAjB;AACA,MAAMK,SAASL,QAAQ,mBAAR,CAAf;AACA,MAAMM,UAAUN,QAAQ,oBAAR,CAAhB;;AAEA,SAASO,OAAT,CAAiBC,MAAjB,EAAyBC,IAAzB,EAA+B;AAC7B,QAAMC,WAAWT,SAASO,MAAT,CAAjB;AACA,QAAMG,SAAST,UAAUQ,QAAV,CAAf;AACA,QAAME,SAAST,OAAOQ,MAAP,CAAf;AACA,QAAME,QAAQT,SAASQ,MAAT,EAAiBH,IAAjB,CAAd;AACA,QAAMK,MAAMT,OAAOQ,KAAP,CAAZ;AACA,SAAOP,QAAQQ,GAAR,EAAa,EAAEC,UAAUN,KAAKO,MAAjB,EAAb,CAAP;AACD;;AAED,SAASC,IAAT,CAAcC,QAAd,EAAwB;AACtB,SAAQ;;;;;;;;IAQNA,SAASC,OAAT,CAAiB,KAAjB,EAAwB,MAAxB,CAAgC;;;;GARlC;AAaD;;AAED,SAASH,MAAT,CAAgBI,OAAhB,EAAyB;AACvB,QAAMC,SAAStB,SAASiB,MAAT,CAAgBI,OAAhB,CAAf;;AAEA,MAAIC,OAAOC,KAAX,EAAkB;AAChB,UAAMD,OAAOC,KAAb;AACD;;AAED,SAAOD,OAAOE,IAAd;AACD;;AAED;;;;;;;;;;;;;AAaA,SAASC,UAAT,CAAoBhB,MAApB,EAA4BiB,OAA5B,EAAqCC,QAArC,EAA+C;AAC7C,MAAI,OAAOlB,MAAP,KAAkB,QAAlB,IAA8B,OAAOiB,OAAP,KAAmB,UAArD,EAAiE;AAC/DC,eAAWD,OAAX;AACAA,cAAUjB,MAAV;AACAA,aAASiB,QAAQjB,MAAjB;AACD;;AAED,QAAMmB,UAAUC,QAAQC,GAAR,CAAY,MAAM;AAChC,UAAMpB,OAAOqB,OAAOC,MAAP,CAAc,EAAd,EAAkBP,WAAWQ,QAA7B,EAAuCP,OAAvC,CAAb;;AAEA,QAAI,OAAOjB,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,YAAMyB,MAAM,yBAAN,CAAN;AACD;;AAED,UAAMf,WAAWX,QAAQC,MAAR,EAAgBC,IAAhB,CAAjB;AACA,UAAMW,UAAUH,KAAKC,QAAL,CAAhB;AACA,WAAOT,KAAKO,MAAL,GAAcA,OAAOI,OAAP,CAAd,GAAgCA,OAAvC;AACD,GAVe,CAAhB;;AAYA,MAAIM,QAAJ,EAAc;AACZC,YAAQO,IAAR,CACEX,QAAQY,QAAQC,QAAR,CAAiBV,QAAjB,EAA2B,IAA3B,EAAiCH,IAAjC,CADV,EAEEc,OAAOF,QAAQC,QAAR,CAAiBV,QAAjB,EAA2BW,GAA3B,CAFT;AAID;;AAED,SAAOV,OAAP;AACD;;AAEDH,WAAWQ,QAAX,GAAsB;AACpBhB,UAAQ,KADY;AAEpBsB,UAAQ;AAFY,CAAtB;;AAKAC,OAAOC,OAAP,GAAiBhB,UAAjB","file":"precompile.js","sourcesContent":["'use strict';\n\nconst uglifyjs = require('uglify-js');\n\nconst prefixer = require('./compiler/prefixer');\nconst tokenizer = require('./compiler/tokenizer');\nconst parser = require('./compiler/parser');\nconst compiler = require('./compiler/compiler');\nconst blocks = require('./compiler/blocks');\nconst codegen = require('./compiler/codegen');\n\nfunction compile(source, opts) {\n  const prefixed = prefixer(source);\n  const tokens = tokenizer(prefixed);\n  const parsed = parser(tokens);\n  const fnAst = compiler(parsed, opts);\n  const ast = blocks(fnAst);\n  return codegen(ast, { minified: opts.minify });\n}\n\nfunction wrap(compiled) {\n  return `\n(function (factory) {\n  if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define(factory);\n  }\n})(function () {\n  ${compiled.replace(/\\n/g, '\\n\\t')}\n\n  return compiled;\n});\n  `;\n}\n\nfunction minify(wrapped) {\n  const result = uglifyjs.minify(wrapped);\n\n  if (result.error) {\n    throw result.error;\n  }\n\n  return result.code;\n}\n\n/**\n * Precompile a benchpress template\n * - `precompiled(source, options): Promise<string>`\n * - `precompile(source, options, callback) => callback(err, output)`\n * - `precompile({ source, ...options }, callback) => callback(err, output)`\n *\n * @param {string} source - Template source\n * @param {Object} options\n * @param {boolean} [options.minify = false] - Output minified code\n * @param {boolean} [options.unsafe = false] - Disable safety checks, will throw on misshapen data\n * @param {function} [callback] - (err, output)\n * @returns {Promise<string>} - output code\n */\nfunction precompile(source, options, callback) {\n  if (typeof source === 'object' && typeof options === 'function') {\n    callback = options;\n    options = source;\n    source = options.source;\n  }\n\n  const promise = Promise.try(() => {\n    const opts = Object.assign({}, precompile.defaults, options);\n\n    if (typeof source !== 'string') {\n      throw Error('source must be a string');\n    }\n\n    const compiled = compile(source, opts);\n    const wrapped = wrap(compiled);\n    return opts.minify ? minify(wrapped) : wrapped;\n  });\n\n  if (callback) {\n    promise.then(\n      code => process.nextTick(callback, null, code),\n      err => process.nextTick(callback, err),\n    );\n  }\n\n  return promise;\n}\n\nprecompile.defaults = {\n  minify: false,\n  unsafe: false,\n};\n\nmodule.exports = precompile;\n"]}